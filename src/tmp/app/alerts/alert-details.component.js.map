{"version":3,"sources":["app/alerts/alert-details.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAiC,eAAe,CAAC,CAAA;AAEjD,+BAA8B,mBAAmB,CAAC,CAAA;AAClD,mBAA2B,SAAS,CAAC,CAAA;AACrC,0BAA0B,oBAAoB,CAAC,CAAA;AAC/C,uBAAyB,iBAAiB,CAAC,CAAA;AAC3C,sBAAgC,gBAAgB,CAAC,CAAA;AAUjD;IAKI,+BAAqB,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;QAC7C,IAAI,QAAQ,GAAG,IAAI,iBAAQ,EAAE,CAAC;QAC9B,IAAI,OAAO,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;QACtD,qBAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAC3B,CAAC;IAED,6CAAa,GAAb;QACI,8EAA8E;QAC9E,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,gEAAgE;QAChE,gEAAgE;QAChE,IAAI,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;QAC1D,IAAI,CAAC,GAAG,eAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,CAAC,CAAC;IACb,CAAC;IApBD;QAAC,YAAK,EAAE;;4DAAA;IARZ;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,kBAAkB;YAC5B,WAAW,EAAE,+BAA+B;YAC5C,SAAS,EAAE,CAAC,qBAAqB,CAAC;YAClC,SAAS,EAAE,CAAC,qBAAS,EAAE,8BAAa,CAAC;YACrC,UAAU,EAAE,CAAC,uBAAe,CAAC;SAChC,CAAC;;6BAAA;IAwBF,4BAAC;AAAD,CAvBA,AAuBC,IAAA;AAvBY,6BAAqB,wBAuBjC,CAAA","file":"app/alerts/alert-details.component.js","sourcesContent":["import { Component, Input } from '@angular/core';\nimport { AlertMarker } from '../management/interfaces';\nimport { DialogService } from '../dialog.service';\nimport { Observable } from 'rxjs/Rx';\nimport { SysLogger } from '../utils/SysLogger';\nimport { DatePipe } from '@angular/common';\nimport { FORM_DIRECTIVES } from '@angular/forms';\n\n\n@Component({\n    selector: 'as-alert-details',\n    templateUrl: 'app/alerts/alert-details.html',\n    styleUrls: ['input {width: 20em}'],\n    providers: [SysLogger, DialogService],\n    directives: [FORM_DIRECTIVES]\n})\nexport class AlertDetailsComponent {\n    @Input() formAlert:  AlertMarker;\n    sub: any;\n\n\n    constructor( private dialogService: DialogService ) {\n        let datePipe = new DatePipe();\n        let datenow = datePipe.transform(new Date(), 'short');\n        SysLogger.log(datenow);\n    }\n\n    canDeactivate(): Observable<boolean> | boolean {\n        // Allow synchronous navigation (`true`) if no alert or the alert is unchanged\n        if (!this.formAlert) {\n            return true;\n        }\n        // Otherwise ask the user with the dialog service and return its\n        // promise which resolves to true or false when the user decides\n        let p = this.dialogService.confirm('Descartar mudan√ßas?');\n        let o = Observable.fromPromise(p);\n        return o;\n    }\n\n}\n"],"sourceRoot":"/source/"}